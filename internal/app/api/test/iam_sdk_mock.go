// Code generated by MockGen. DO NOT EDIT.
// Source: iam-permission/internal/app/api/test (interfaces: IIAMSDK)

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"

	entity "github.com/anhvietnguyennva/iam-go-sdk/oauth/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIIAMSDK is a mock of IIAMSDK interface.
type MockIIAMSDK struct {
	ctrl     *gomock.Controller
	recorder *MockIIAMSDKMockRecorder
}

// MockIIAMSDKMockRecorder is the mock recorder for MockIIAMSDK.
type MockIIAMSDKMockRecorder struct {
	mock *MockIIAMSDK
}

// NewMockIIAMSDK creates a new mock instance.
func NewMockIIAMSDK(ctrl *gomock.Controller) *MockIIAMSDK {
	mock := &MockIIAMSDK{ctrl: ctrl}
	mock.recorder = &MockIIAMSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIAMSDK) EXPECT() *MockIIAMSDKMockRecorder {
	return m.recorder
}

// ParseBearerJWT mocks base method.
func (m *MockIIAMSDK) ParseBearerJWT(arg0 string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBearerJWT", arg0)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBearerJWT indicates an expected call of ParseBearerJWT.
func (mr *MockIIAMSDKMockRecorder) ParseBearerJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBearerJWT", reflect.TypeOf((*MockIIAMSDK)(nil).ParseBearerJWT), arg0)
}

// ParseJWT mocks base method.
func (m *MockIIAMSDK) ParseJWT(arg0 string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", arg0)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockIIAMSDKMockRecorder) ParseJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockIIAMSDK)(nil).ParseJWT), arg0)
}
